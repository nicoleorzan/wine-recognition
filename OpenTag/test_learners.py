import pytest
import numpy as np
import pickle
import numpy as numpy
import BiLSTM_CRF_Model
import Train_Test
import Learners

with open("../saved_things/tagged_sentences_100000.pkl", 'rb') as f:
        tagged_sentences = pickle.load(f)
with open("../saved_things/words_100000.pkl", 'rb') as f:
        words = pickle.load(f)
tags = ['O', 'B-aroma', 'B-taste', 'B-fruit', 'I-aroma', 'I-taste', 'I-fruit']

wt = Train_Test.Train_Test(tagged_sentences, tags, words)

learners_num = 2
obj = Learners.Learners(wt, learners_num)


X_tr = [[13, 24, 9, 12, 100, 100], [14, 99, 12, 9, 3, 100], [12, 4, 39, 76, 45, 5], [1, 4, 36, 45, 9, 5], \
        [10, 4, 41, 100, 100, 100]] 
X_te = [[12, 11, 10, 13, 24, 9], [9, 3, 14, 10, 12, 100], [45, 39, 76, 12, 4, 5], [19, 2, 3, 42, 100, 100],\
        [13, 21, 8, 24, 9, 100], [3, 9, 39, 11, 12, 13], [54, 3,  4, 5, 76, 98], [89, 71, 32, 25, 9, 100],
        [28, 29, 1,  24, 13, 100]]
# I have three poxible tags for each word
y_tr = [[[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]],\
        [[0, 1, 0], [0, 1, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]],\
        [[1, 0, 0], [1, 0, 0], [0, 0, 1], [1, 0, 0], [1, 0, 0], [1, 0, 0]],\
        [[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [0, 0, 1], [1, 0, 0]],\
        [[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0], [1, 0, 0], [0, 1, 0]]]

y_te = [[[1, 0, 0], [1, 0, 0], [0, 1, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]],\
        [[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0], [1, 0, 0], [0, 1, 0]],\
        [[1, 0, 0], [1, 0, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [1, 0, 0]],\
        [[1, 0, 0], [0, 0, 1], [0, 0, 1], [0, 1, 0], [1, 0, 0], [0, 1, 0]],\
        [[0, 1, 0], [1, 0, 0], [0, 1, 0], [1, 0, 0], [0, 0, 1], [1, 0, 0]],\
        [[0, 1, 0], [0, 1, 0], [0, 0, 1], [0, 0, 1], [1, 0, 0], [0, 1, 0]],\
        [[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [0, 0, 1], [1, 0, 0]],\
        [[1, 0, 0], [0, 1, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]],\
        [[1, 0, 0], [1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0], [0, 0, 1]]] 

def test_set_train_test():
        obj.set_train_test(X_tr, y_tr, X_te, y_te)
        assert obj.get_X_train() == X_tr
        assert obj.get_X_test() == X_te
        assert obj.get_y_train() == y_tr
        assert obj.get_y_test() == y_te

def test_upload_train_set():
        obj.set_train_test(X_tr, y_tr, X_te, y_te)
        U = [1, 2, 4, 8]
        obj.upload_train_test_sets(U)

        new_X_tr = [[13, 24, 9, 12, 100, 100], [14, 99, 12, 9, 3, 100], [12, 4, 39, 76, 45, 5], \
                    [1, 4, 36, 45, 9, 5], [10, 4, 41, 100, 100, 100], [9, 3, 14, 10, 12, 100],  \
                    [45, 39, 76, 12, 4, 5], [13, 21, 8, 24, 9, 100], [28, 29, 1,  24, 13, 100]] 
        new_y_tr = [[[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]],\
                   [[0, 1, 0], [0, 1, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]],\
                   [[1, 0, 0], [1, 0, 0], [0, 0, 1], [1, 0, 0], [1, 0, 0], [1, 0, 0]],\
                   [[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [0, 0, 1], [1, 0, 0]],\
                   [[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0], [1, 0, 0], [0, 1, 0]],\
                   [[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0], [1, 0, 0], [0, 1, 0]],\
                   [[1, 0, 0], [1, 0, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [1, 0, 0]],\
                   [[0, 1, 0], [1, 0, 0], [0, 1, 0], [1, 0, 0], [0, 0, 1], [1, 0, 0]],\
                   [[1, 0, 0], [1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0], [0, 0, 1]]]
        assert (obj.get_X_train() == new_X_tr).all()
        assert (obj.get_y_train() ==  np.array(new_y_tr)).all()
